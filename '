use std::fs::{self, OpenOptions};

use crate::schema::errors::{Error, Result};

pub enum WriteMode {
    Overwrite,
    Append,
}

#[derive(Default, Debug, Eq, PartialEq)]
pub struct File {
    path: String,
    size: usize,
}

impl File {
    pub fn new(path: &str, size: usize) -> File {
        File {
            path: String::from(path),
            size,
        }
    }

    pub fn path(&self) -> &str {
        &self.path
    }

    pub fn size(&self) -> usize {
        self.size
    }
}

trait FileWriter {
    pub fn write(file: File, content: &[u8]);
}

pub fn write_file(path: &str, mode: WriteMode, content: &[u8]) -> Result<File> {
    match mode {
        WriteMode::Overwrite => fs::write(path, content)
            .map_err(|err| Error::create_invalid_argument_error(&err.to_string()))
            .map(|_| File::new(path, content.len())),
        WriteMode::Append => Err(Error::create_unimplemented_error("Append")),
    }
}

